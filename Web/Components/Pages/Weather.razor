@page "/weather"

@using Radzen
@inject Radzen.NotificationService NotificationService

<PageTitle>Weather</PageTitle>

<RadzenHeading Size="H1" Text="Weather" />

<p>This component demonstrates showing data.</p>

@if (forecasts == null) {
  <p><em>Loading...</em></p>
} else {
  <RadzenDataGrid Data="@forecasts" TItem="WeatherForecast" AutoGenerateColumns="false" ColumnWidth="200px">
    <Columns>
      <RadzenDataGridColumn TItem="WeatherForecast" Property="Date" Title="Date" FormatString="{0:dd/MM/yyyy}" Width="150px" />
      <RadzenDataGridColumn TItem="WeatherForecast" Property="TemperatureC" Title="Temp. (C)" />
      <RadzenDataGridColumn TItem="WeatherForecast" Property="TemperatureF" Title="Temp. (F)" />
      <RadzenDataGridColumn TItem="WeatherForecast" Property="Summary" Title="Summary" />
    </Columns>
  </RadzenDataGrid>
}

@code {
  private WeatherForecast[]? forecasts;

  protected override async Task OnInitializedAsync() {
    // Simulate asynchronous loading to demonstrate a loading indicator
    await Task.Delay(500);

    var startDate = DateOnly.FromDateTime(DateTime.Now);
    var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
    forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast {
        Date = startDate.AddDays(index),
        TemperatureC = Random.Shared.Next(-20, 55),
        Summary = summaries[Random.Shared.Next(summaries.Length)]
      }).ToArray();
  }

  private class WeatherForecast {
    public DateOnly Date { get; set; }
    public int TemperatureC { get; set; }
    public string? Summary { get; set; }
    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
  }
}
