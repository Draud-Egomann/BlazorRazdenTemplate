@implements IDisposable

@inject NavigationManager NavigationManager

<RadzenPanelMenuItem Path="/" Text="Home" Icon="home" />
<RadzenPanelMenuItem Path="counter" Text="Counter" Icon="note_add" />
<RadzenPanelMenuItem Path="weather" Text="Weather" Icon="list" />

<AuthorizeView>
  <NotAuthorized>
    <RadzenPanelMenuItem Path="Account/Register" Text="Register" Icon="accessibility" />
    <RadzenPanelMenuItem Path="Account/Login" Text="Login" Icon="account_box" />
  </NotAuthorized>

  <Authorized>
    <RadzenPanelMenuItem Path="auth" Text="Auth Required" Icon="lock" />
    <RadzenPanelMenuItem Path="Account/Manage" Text="@context.User.Identity?.Name" Icon="account_circle" />

    <li class="rz-navigation-item">
      <div class="rz-navigation-item-wrapper" style="margin-right:0px">
        <form action="Account/Logout" method="post" style="width: 100%;">
          <div class="rz-navigation-item-link">
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
            <RadzenIcon Icon="lock_outline" Style="margin-right: 16px;" />
            <button type="submit"
                    class="d-flex text-dark nav-link rz-navigation-item-text"
                    style="background: transparent; border: 0; padding: 0; ">
              Logout
            </button>
          </div>
        </form>
      </div>
    </li>
  </Authorized>
</AuthorizeView>

@code {
  private string? currentUrl;

  protected override void OnInitialized() {
    currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
    NavigationManager.LocationChanged += OnLocationChanged;
  }

  private void OnLocationChanged(object? sender, LocationChangedEventArgs e) {
    currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
    StateHasChanged();
  }

  public void Dispose() {
    NavigationManager.LocationChanged -= OnLocationChanged;
  }
}

